               Zendesk Search
               
What is it ?
------------

Zendesk Search is a software project that provide the value search functions 
on the Zendesk JSON files. 

All the JSON files are loaded as "Group" data into memory for searching.


Project directories
-------------------

  src
    - java source code
    
  src/main/resources
    - config.properties
  
  json
    - default directory for json files
    
  doc
    - project documents, project architecture document
    
  sample_log
    - sample logs for all the correction user actions

  target
    - generated by the "mvn install", contains build output 
      include the zendesksearch.jar


Requirement
-----------

JDK 
  1.8 or above. This is a Java application. JDK is required to run the 
  application and the project related tools.
  
  To verify the system Java version, please type "java -version"
  
Maven
  3.6.0 or above. This is a maven based project. Maven here is used to 
  
  1) load all lib jars
  2) compile the java project
  3) generated executable jar file - zendesksearch.jar

  To verify your system Maven version, please type "mvn -v"

Input files
  The input JSON file should be in the standard JSON file format and provide 
  an unique "_id" in each entry.

  Each JSON file will be loaded as a "Group" in the application.


Install
-------
  
  In the project directory verify pom.xml exists.
  
  Verify the pom.xml JDK version - <jdk.version> and maker sure it's set to 
  same as the system JDK version
  
  Run command "mvn install", and verify the install is successfully.
  
  The success log should be like the sample log file :
  - mvn_install_success_sample.log
  
  Directory "target" should be generated.
  
 
Run Application
---------------

  Go into "target" directory that is generated by the step "Install".
  
  Run command "java -jar zendesksearch.jar", and the "Welcome" banner should 
  show up.
  
  The below two types of the input that can be typed.
  
Command
  help            - View the help document.
  
  list            - list all the available groups (JSON files)
  
  list groupName  - list all the attributes of the given group
  
Query
  groupName, attribute, value, attribute, value
    - Search the group by a serial of "attribute, value" pair, and the number
      of the pairs can be any number
      
      Example: 
        1) users, _id, 22
        2) users, role, admin, verified, false, active, true
        3) users, active, true, verified, false, role, end-user, locale, en-AU, shared, false  
  
  groupName, id   
    - This is the only special case. It's a short format and only be able to 
      use for the groupName and _id search. This format ONLY allow TWO parameters.
      
      Example: users, 72
        This format works same as : users, _id, 72
  
  
JSON File setup
---------------

  Configuration file - src/main/resources/config.properties
  
  1) Set the file path with attribute "groupFile_" plus an integer suffix.
  2) Give a group name for the file with attribute "groupName_" plus an integer suffix.
  
  The JSON file will be loaded by the application using the given group name, and 
  group name can be checked by the "list" command when running the application.
  
  The integer suffix MUST start with 1, and must be increased by 1 each time.
  
  
Correlation Setup
-----------------

  Configuration file - src/main/resources/config.properties
  
  Correlation is used to load file B data into file A by foreign key.
  
  Example:
    users.json file has attribute "organization_id", and it is also the "_id" attribute
    of organizations.json. So the user's organization information can be found by this 
    way.
    
  Correlation Definition: 
  
    groupName             - data will be loaded into this group (to group)
    correlatedGroupName   - data will be loaded from this group (from group)
    attribute             - source data attribute of "to group"
    correlatedAttribute   - corresponding attribute in the "from group"
    targetAttribute       - loaded attribute data of "from group"
    targetAlias           - loaded attribute data show as this attribute in "to group"
  
  Example:
    In "correlation_1" - users,organizations,organization_id,_id,name,organization
    
    Here the "users" group will use its "organization_id" to match the "organizations"
    group attribute "_id", after find the corresponding organization, "users" will show
    the organization "name" as "organization". 

